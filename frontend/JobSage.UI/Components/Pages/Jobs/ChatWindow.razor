@using System.Net.Http.Json
@using JobSage.UI.Models
@using JobSage.UI.Services
@using System.Text.Json
@inject HttpClient Http
@inject IChatService ChatService
<div class="chat-window">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">Agent Chat</MudText>

        <div class="agent-selection">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6">Select an Agent</MudText>
                <MudGrid>
                    @foreach (var agent in agents)
                    {
                        <MudItem xs="12">
                            <MudButton OnClick="async () => await SelectAgent(agent.Name)" Variant="Variant.Filled"
                                Style="background-color: #c4c4c4; color: black;" FullWidth="true"
                                Class="agent-message mb-2 button-height">
                                <MudText Typo="Typo.body1" Style="color: black;">@agent.Name</MudText>
                                @* <MudText Typo="Typo.caption" Style="color: black;">@agent.Description</MudText> *@
                            </MudButton>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        </div>

        <MudList T="ChatMessage">
            @foreach (var msg in messages)
            {
                <MudListItem T="ChatMessage" Class="@(msg.IsUser ? "user-message" : "agent-message")">
                    <MudText Style="white-space: pre-line;">@msg.Text</MudText>
                </MudListItem>
            }
        </MudList>
        <MudTextField @bind-Value="userInput" Placeholder="Type a message..." />
        <MudButton OnClick="SendMessage" Color="Color.Primary">Send</MudButton>
    </MudPaper>
</div>


@code {
    [Parameter] public JobDto? CurrentJob { get; set; }

    private class ChatMessage
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }

    private class AgentDto
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }

    private List<ChatMessage> messages = new();
    private string userInput = "";
    private List<(string Id, string Name, string Description)> agents = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            messages.Add(new ChatMessage { Text = "Welcome to the chat!", IsUser = false });
            // Fetch agents using ChatService
            var agentsDictionary = await ChatService.GetAgentsAsync();
            agents = agentsDictionary.Select(agent => (agent.Key, agent.Value.Name, agent.Value.Description)).ToList();
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { Text = $"Error loading agents: {ex.Message}", IsUser = false });
        }
    }

    private async Task LoadAgentResponseAsync(JobDto currentJob, string agentId)
    {
        var jsonResponse = await ChatService.SendMessageAsync(currentJob, agentId);

        try
        {
            var formattedResponse = FormatJsonElementResponse(jsonResponse);
            messages.Add(new ChatMessage { Text = $"Agent: \n {formattedResponse}", IsUser = false });
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { Text = $"Agent: Error processing response - {ex.Message}", IsUser = false });
        }
    }

    private string FormatJsonElementResponse(JsonElement jsonElement)
    {
        var dictionary = ParseJsonElementAsStringDictionary(jsonElement);
        return string.Join("\n", dictionary.Select(kvp => $"{kvp.Key}: {kvp.Value}"));
    }

    private static Dictionary<string, string> ParseJsonElementAsStringDictionary(JsonElement jsonElement)
    {
        var result = new Dictionary<string, string>();

        if (jsonElement.ValueKind == JsonValueKind.Object)
        {
            foreach (var property in jsonElement.EnumerateObject())
            {
                string key = property.Name;
                string value = property.Value.ValueKind switch
                {
                    JsonValueKind.String => property.Value.GetString() ?? "",
                    JsonValueKind.Number => property.Value.GetRawText(),
                    JsonValueKind.True => "true",
                    JsonValueKind.False => "false",
                    JsonValueKind.Null => "null",
                    _ => property.Value.GetRawText(),
                };
                result[key] = value;
            }
        }

        return result;
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userInput))
        {
            messages.Add(new ChatMessage { Text = $"You: {userInput}", IsUser = true });

            await Task.Delay(1000); // Simulate a delay for the agent response
                                    @* var response = await Http.PostAsJsonAsync($"/api/chat/{CurrentJob?.Id}", new { message = userInput }); 
             var reply = await response.Content.ReadAsStringAsync();

            try
            {
                var parsedReply = System.Text.Json.JsonSerializer.Deserialize<JsonElement>(reply);
                if (parsedReply.TryGetProperty("Summary", out var summary))
                {
                    messages.Add(new ChatMessage { Text = summary.GetString() ?? "", IsUser = false });
                }
                else
                {
                    messages.Add(new ChatMessage { Text = reply, IsUser = false });
                }
            }
            catch (System.Text.Json.JsonException)
            {
                messages.Add(new ChatMessage { Text = reply, IsUser = false });
            } *@

            userInput = "";
        }
    }

    private async Task SelectAgent(string agentName)
    {
        var agentId = agents.FirstOrDefault(a => a.Name == agentName).Id;
        if (string.IsNullOrEmpty(agentId))
        {
            messages.Add(new ChatMessage { Text = "Agent not found.", IsUser = true });
            return;
        }

        if (CurrentJob != null)
            await LoadAgentResponseAsync(CurrentJob, agentId);
    }
}

<style>
    .user-message {
        text-align: right;
        background-color: #e0f7fa;
        padding: 10px;
        border-radius: 10px;
        margin: 5px;
    }

    .agent-message {
        text-align: left;
        background-color: #f1f8e9;
        padding: 10px;
        border-radius: 10px;
        margin: 5px;
    }

    .agent-selection {
        margin-bottom: 20px;
    }

    .button-height {
        height: 50px;
        /* Adjust this value to match the height of the 'Welcome to the chat!' div */
    }
</style>