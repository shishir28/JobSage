@using System.Net.Http.Json
@using JobSage.UI.Models
@using JobSage.UI.Services
@using System.Text.Json
@inject HttpClient Http
@inject IChatService ChatService
<div class="chat-window">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">Agent Chat</MudText>

        <div class="agent-selection">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6">Select an Agent</MudText>
                <MudGrid>
                    @foreach (var agent in agents)
                    {
                        <MudItem xs="12">
                            <MudButton OnClick="async () => await SelectAgent(agent.Name)" Variant="Variant.Filled"
                                Style="background-color: #c4c4c4; color: black;" FullWidth="true"
                                Class="agent-message mb-2 button-height">
                                <MudText Typo="Typo.body1" Style="color: black;">@agent.Name</MudText>
                                @* <MudText Typo="Typo.caption" Style="color: black;">@agent.Description</MudText> *@
                            </MudButton>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        </div>

        <MudList T="ChatMessage">
            @foreach (var msg in messages)
            {
                <MudListItem T="ChatMessage">
                    <div class="@(msg.IsUser ? "user-message" : "agent-message")">
                        <MudText Style="white-space: pre-line;">@msg.Text</MudText>
                    </div>
                </MudListItem>
            }
        </MudList>
        <MudTextField @bind-Value="userInput" Placeholder="Type a message..." @onkeyup="HandleKeyPress"
            Immediate="true" />
        <MudButton OnClick="SendMessage" Color="Color.Primary">Send</MudButton>
    </MudPaper>
</div>


@code {
    [Parameter] public JobDto? CurrentJob { get; set; }
    [Parameter] public string? ConversationId { get; set; }
    [Parameter] public EventCallback<string> OnConversationIdChanged { get; set; }

    private class ChatMessage
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }

    private class AgentDto
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }

    private List<ChatMessage> messages = new();
    private string userInput = "";
    private List<(string Id, string Name, string Description)> agents = new();
    [Parameter] public EventCallback<List<string>> OnContractorIdsReceived { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            messages.Add(new ChatMessage { Text = "Welcome to the chat!", IsUser = false });
            // Fetch agents using ChatService
            var agentsDictionary = await ChatService.GetAgentsAsync();
            agents = agentsDictionary.Select(agent => (agent.Key, agent.Value.Name, agent.Value.Description)).ToList();
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { Text = $"Error loading agents: {ex.Message}", IsUser = false });
        }
    }

    private async Task LoadAgentResponseAsync(JobDto currentJob, string agentId)
    {
        var jsonResponse = await ChatService.SendMessageAsync(currentJob, agentId);

        try
        {
            var formattedResponse = FormatJsonElementResponse(jsonResponse);
            messages.Add(new ChatMessage { Text = $"Agent: \n {formattedResponse}", IsUser = false });
            if (agentId == "recommendation")
                await FilterContractorsAsync(jsonResponse);
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { Text = $"Agent: Error processing response - {ex.Message}", IsUser = false });
        }
    }

    private async Task FilterContractorsAsync(JsonElement jsonElement)
    {
        var contractorIds = jsonElement.EnumerateArray()
        .Select(item => item.GetProperty("contractorid").GetString() ?? "Unknown Contractor")
        .ToList();

        if (contractorIds.Count > 0)
            await OnContractorIdsReceived.InvokeAsync(contractorIds);
    }

    private string FormatJsonElementResponse(JsonElement jsonElement)
    {
        if (jsonElement.ValueKind == JsonValueKind.Array)
            return ParseRecommendations(jsonElement);
        else
        {
            var dictionary = ParseJsonElementAsStringDictionary(jsonElement);
            return string.Join("\n", dictionary.Select(kvp => $"{kvp.Key}: {kvp.Value}"));
        }
    }

    private string ParseRecommendations(JsonElement jsonElement)
    {
        if (jsonElement.ValueKind == JsonValueKind.Array)
        {
            var items = jsonElement.EnumerateArray()
            .Select((item, idx) => FormatJsonElementResponse(item));
            return string.Join("\n\n", items);
        }
        throw new ArgumentException("Expected an array of recommendations.");
    }

    private static Dictionary<string, string> ParseJsonElementAsStringDictionary(JsonElement jsonElement)
    {
        var result = new Dictionary<string, string>();

        if (jsonElement.ValueKind == JsonValueKind.Object)
        {
            foreach (var property in jsonElement.EnumerateObject())
            {
                string key = property.Name;
                string value = property.Value.ValueKind switch
                {
                    JsonValueKind.String => property.Value.GetString() ?? "",
                    JsonValueKind.Number => property.Value.GetRawText(),
                    JsonValueKind.True => "true",
                    JsonValueKind.False => "false",
                    JsonValueKind.Null => "null",
                    _ => property.Value.GetRawText(),
                };
                result[key] = value;
            }
        }

        return result;
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userInput))
        {
            messages.Add(new ChatMessage { Text = $"You: {userInput}", IsUser = true });

            try
            {
                // Create filter if CurrentJob is available
                Dictionary<string, object>? filter = null;
                @* if (CurrentJob != null)
                {
                    filter = new Dictionary<string, object>
{
{ "jobId", CurrentJob.Id.ToString() }
};
                } *@

                // Call the chat service with conversation ID if available
                var response = await ChatService.SendChatMessageAsync(
                message: userInput,
                conversationId: ConversationId,
                filter: filter
                );

                // Update conversation ID if it's new
                if (string.IsNullOrEmpty(ConversationId) && !string.IsNullOrEmpty(response.ConversationId))
                {
                    ConversationId = response.ConversationId;
                    await OnConversationIdChanged.InvokeAsync(ConversationId);
                } // Format the response
                var formattedMessage = FormatChatResponse(response);
                messages.Add(new ChatMessage { Text = formattedMessage, IsUser = false });
            }
            catch (Exception ex)
            {
                messages.Add(new ChatMessage
                {
                    Text = $"Error: {ex.Message}",
                    IsUser = false
                });
            }

            userInput = "";
        }
    }

    private string FormatChatResponse(ChatMessageResponse response)
    {
        var messageBuilder = new System.Text.StringBuilder();

        // Add the main message
        messageBuilder.AppendLine(response.Message);

        // Add source documents if any
        if (response.SourceDocuments.Any())
        {
            messageBuilder.AppendLine("\nSource Documents:");
            foreach (var doc in response.SourceDocuments)
            {
                messageBuilder.AppendLine("---");
                messageBuilder.AppendLine(doc.Content);

                // Add relevant metadata
                if (doc.Metadata.Any())
                {
                    messageBuilder.AppendLine("\nMetadata:");
                    foreach (var meta in doc.Metadata)
                    {
                        messageBuilder.AppendLine($"- {meta.Key}: {meta.Value}");
                    }
                }
            }
        }

        return messageBuilder.ToString();
    }

    private async Task SelectAgent(string agentName)
    {
        var agentId = agents.FirstOrDefault(a => a.Name == agentName).Id;
        if (string.IsNullOrEmpty(agentId))
        {
            messages.Add(new ChatMessage { Text = "Agent not found.", IsUser = true });
            return;
        }

        if (CurrentJob != null)
            await LoadAgentResponseAsync(CurrentJob, agentId);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
}
