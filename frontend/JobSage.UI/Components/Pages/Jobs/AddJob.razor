@page "/jobs/add"
@rendermode InteractiveServer
@using JobSage.Domain.Entities
@using JobSage.Domain.Enums
@using MudBlazor
@inject IJobService JobService
@inject IContractorService ContractorService
@using JobSage.UI.Models
@using JobSage.UI.Services
@inject NavigationManager Nav
@inject IChatStateService ChatState

<MudPopoverProvider />
<MudGrid>
    <MudItem xs="7">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h5">Add Job</MudText>
            <MudForm @ref="form" Model="job">
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="job.Title" Label="Title" Required="true" />
                    <MudTextField @bind-Value="job.Description" Label="Description" Required="true" />
                    <MudSelect T="JobType" @bind-Value="job.JobType" Label="Type" Required="true">
                        @foreach (JobType type in Enum.GetValues(typeof(JobType)))
                        {
                            <MudSelectItem Value="@type">@type</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="JobPriority" @bind-Value="job.Priority" Label="Priority" Required="true">
                        @foreach (JobPriority priority in Enum.GetValues(typeof(JobPriority)))
                        {
                            <MudSelectItem Value="@priority">@priority</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="JobStatus" @bind-Value="job.Status" Label="Status" Required="true">
                        @foreach (JobStatus status in Enum.GetValues(typeof(JobStatus)))
                        {
                            <MudSelectItem Value="@status">@status</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField @bind-Value="job.PropertyInfo.PropertyAddress" Label="Property Address" />
                    <MudDatePicker @bind-Date="job.Scheduling.DueDate" Label="Due Date" />
                    <MudTextField @bind-Value="job.Cost.EstimatedCost" Label="Estimated Cost" />
                    <MudTextField @bind-Value="job.Cost.ActualCost" Label="Actual Cost" />
                    <MudTextField @bind-Value="job.Cost.ApprovedBudget" Label="Approved Budget" />
                    <MudTextField @bind-Value="job.TenantContact" Label="Tenant Contact" />
                    <MudSelect T="string" Label="Contractor" @bind-Value="job.Contractor.Id" Required="true">
                        @foreach (var contractor in contractors)
                        {
                            <MudSelectItem Value="@contractor.Id">@contractor.Name (@contractor.Trade)</MudSelectItem>
                        }
                    </MudSelect>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveJob">Add</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
                </MudStack>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudIconButton Icon="@Icons.Material.Filled.Chat" Color="Color.Primary" OnClick="ToggleDrawer"
        Style="position: absolute; top: 16px; right: 16px; z-index: 1200;" />
    <MudDrawer Anchor="MudBlazor.Anchor.End" Open="@_drawerOpen" Elevation="4" Variant="DrawerVariant.Temporary"
        Width="400px" Class="pa-4">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Chat</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="ToggleDrawer" />
        </MudDrawerHeader>
        <ChatWindow CurrentJob="job" OnContractorIdsReceived="HandleContractorIdsReceived"
            ConversationId="@conversationId" OnConversationIdChanged="HandleConversationIdChanged" />
    </MudDrawer>
</MudGrid>

@code {
    private string? selectedContractorId; // temporary field just for the form
    private string? conversationId;

    private JobDto job = new();
    private MudForm? form;
    private List<ContractorDto> contractors = new();
    private List<string> filteredContractorIds = new();
    private bool _drawerOpen = true;

    protected override async Task OnInitializedAsync()
    {
        job.EnsureNonNullNestedObjects();
        job.Scheduling.DueDate = DateTime.UtcNow.AddDays(7); // Default due date
        contractors = await ContractorService.GetContractors();
    }

    private async Task SaveJob()
    {
        if (form != null)
        {
            await form.Validate();
            if (form.IsValid)
            {
                await JobService.AddJob(job);
                Nav.NavigateTo("/jobs");
            }
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("/jobs");
    }

    private void HandleContractorIdsReceived(List<string> ids)
    {
        filteredContractorIds = ids;
        contractors = contractors.Where(c => filteredContractorIds.Contains(c.Id)).ToList();
    }

    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;

    private async Task HandleConversationIdChanged(string newConversationId)
    {
        conversationId = newConversationId;
        if (job.Id != Guid.Empty)
        {
            ChatState.SetConversationId(job.Id, newConversationId);
        }
    }

    protected override void OnParametersSet()
    {
        if (job.Id != Guid.Empty)
        {
            conversationId = ChatState.GetConversationId(job.Id);
        }
    }
}